[{"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\index.js":"1","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\App.js":"2","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\serviceWorker.js":"3","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\theme\\theme.js":"4","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\theme\\colours.js":"5","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\store\\Store.jsx":"6","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\home\\Home.jsx":"7","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\menuBar\\MenuBar.jsx":"8","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\Footer\\Footer.jsx":"9","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\services\\userService.js":"10","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\Notifications\\Notifications.js":"11","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\menuBar\\MenuBarNew.jsx":"12","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\notAuthorised\\NotAuthorised.jsx":"13","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\notFound\\NotFound.jsx":"14","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\constants\\serviceURLS.js":"15","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\services\\eventsService.js":"16","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\NewEvent.jsx":"17","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\Events.jsx":"18","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\EventDetails.jsx":"19","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\profile\\Profile.jsx":"20","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\profile\\timeTransformer.js":"21","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\members\\Members.jsx":"22"},{"size":874,"mtime":1609605540197,"results":"23","hashOfConfig":"24"},{"size":2210,"mtime":1617207564922,"results":"25","hashOfConfig":"24"},{"size":5227,"mtime":1609514592941,"results":"26","hashOfConfig":"24"},{"size":497,"mtime":1609611263757,"results":"27","hashOfConfig":"24"},{"size":297,"mtime":1610733785526,"results":"28","hashOfConfig":"24"},{"size":385,"mtime":1609600614139,"results":"29","hashOfConfig":"24"},{"size":1304,"mtime":1617207309086,"results":"30","hashOfConfig":"24"},{"size":3222,"mtime":1609801303807,"results":"31","hashOfConfig":"24"},{"size":369,"mtime":1611832464081,"results":"32","hashOfConfig":"24"},{"size":782,"mtime":1617211114685,"results":"33","hashOfConfig":"24"},{"size":1056,"mtime":1610037612829,"results":"34","hashOfConfig":"24"},{"size":4008,"mtime":1616615662325,"results":"35","hashOfConfig":"24"},{"size":870,"mtime":1609982988250,"results":"36","hashOfConfig":"24"},{"size":872,"mtime":1610013445223,"results":"37","hashOfConfig":"24"},{"size":279,"mtime":1616615371183,"results":"38","hashOfConfig":"24"},{"size":650,"mtime":1611874391492,"results":"39","hashOfConfig":"24"},{"size":9784,"mtime":1617207340906,"results":"40","hashOfConfig":"24"},{"size":2537,"mtime":1617278877529,"results":"41","hashOfConfig":"24"},{"size":10184,"mtime":1617110709295,"results":"42","hashOfConfig":"24"},{"size":14600,"mtime":1619291249623,"results":"43","hashOfConfig":"24"},{"size":1442,"mtime":1617277795398,"results":"44","hashOfConfig":"24"},{"size":7874,"mtime":1617278216875,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1yy4u3x",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\index.js",[],["96","97"],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\App.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\serviceWorker.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\theme\\theme.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\theme\\colours.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\store\\Store.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\home\\Home.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\menuBar\\MenuBar.jsx",["98","99"],"import React, {useContext, useState, useEffect} from \"react\";\r\nimport './menubar.scss';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport { UserContext } from \"../../store/Store\";\r\nimport { Link } from 'react-router-dom'\r\nimport { getUser } from \"../../services/userService\";\r\nimport Notifications from \"../Notifications/Notifications\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction MenuBar() {\r\n    const notifications = new Notifications();\r\n    const [userProfile, setUserProfile] = useContext(UserContext);\r\n    const [pageLoad] = useState(true)\r\n\r\n    useEffect( () => {\r\n        if (!userProfile){\r\n            console.log(userProfile)\r\n            getUser().then( ({ data }) => {\r\n                setUserProfile(data);\r\n                console.log(data);\r\n                notifications.sendToast('success', 5000, 'Success', 'Logged In...');\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [pageLoad])\r\n\r\n\r\n    const login = () => window.location.href = 'http://service.redwinegaming.com/api/auth/discord';\r\n\r\n    return (\r\n        <div id=\"menuBar\">\r\n            <header id=\"nav-wrapper\">\r\n                <nav id=\"nav\">\r\n                    <div className=\"nav left\">\r\n                            <span className=\"gradient skew\"><h1 className=\"logo un-skew\"><Link\r\n                                to=\"/\">[RWG]</Link></h1></span>\r\n                        <button id=\"menu\" className=\"btn-nav\"><span\r\n                            className=\"fas fa-bars\"></span></button>\r\n                    </div>\r\n                    { userProfile ?\r\n                        <div className=\"nav right\">\r\n                            <Link to=\"/\" className=\"nav-link active\"><span\r\n                                className=\"nav-link-span\"><span className=\"u-nav\">Home</span></span></Link>\r\n                            <Link to='/events' className=\"nav-link\"><span\r\n                                className=\"nav-link-span\"><span\r\n                                className=\"u-nav\">Events</span></span></Link>\r\n                            <Link to=\"/\" className=\"nav-link\"><span\r\n                                className=\"nav-link-span\"><span className=\"u-nav\">Members</span></span></Link>\r\n                            <Link to=\"/\" className=\"nav-link profile\"><span className=\"nav-link-span\"><span\r\n                                className=\"u-nav\">{userProfile.userName} <Avatar id=\"accountCircle\" alt={userProfile.userName} src={`https://cdn.discordapp.com/avatars/${userProfile._id}/${userProfile.avatar}`}/> </span></span></Link>\r\n                        </div>\r\n                        :\r\n                        <div className=\"nav right\">\r\n                            <a href=\"#\"  onClick={login} className=\"nav-link\"><span className=\"nav-link-span\"><span\r\n                                className=\"u-nav\">Login  </span><AccountCircle id=\"defaultAccountCircle\"\r\n                                                                               fontSize=\"default\"/></span></a>\r\n                        </div>\r\n                    }\r\n\r\n                </nav>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MenuBar;\r\n",["100","101"],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\services\\userService.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\Notifications\\Notifications.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\components\\menuBar\\MenuBarNew.jsx",["102","103","104","105","106","107","108"],"import React, {useEffect, useState, useContext} from 'react';\r\nimport miniLogo from '../../assets/images/r.png'\r\nimport './MenuBarNew.scss'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { Link } from 'react-router-dom'\r\nimport { UserContext } from '../../store/Store';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {getUser} from '../../services/userService';\r\nimport {serviceURL, appURL} from '../../constants/serviceURLS';\r\nimport Notifications from '../Notifications/Notifications';\r\n\r\n\r\nfunction MenubarNew() {\r\n\r\n    const [userProfile, setUserProfile] = useContext(UserContext);\r\n    const [pageLoad] = useState(true)\r\n    let navbar;\r\n    let navbarToggle;\r\n    let navbarMenu;\r\n    let navbarLinksContainer;\r\n    const notifications = new Notifications();\r\n\r\n    useEffect( () => {\r\n        if (!userProfile){\r\n            getUser().then( ({ data }) => {\r\n                setUserProfile(data);\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [pageLoad])\r\n\r\n    useEffect(() => {\r\n        navbar = document.getElementById(\"navbar\");\r\n        navbarToggle = navbar.querySelector(\".navbar-toggle\");\r\n        navbarMenu = navbar.querySelector(\".navbar-menu\");\r\n        navbarLinksContainer = navbar.querySelector(\".navbar-links\");\r\n\r\n        navbarToggle.addEventListener(\"click\", () => {\r\n            if (navbar.classList.contains(\"opened\")) {\r\n                closeMobileNavbar();\r\n            } else {\r\n                openMobileNavbar();\r\n            }\r\n        });\r\n\r\n        navbarLinksContainer.addEventListener(\"click\", (clickEvent) => {\r\n            clickEvent.stopPropagation();\r\n        });\r\n\r\n        navbarMenu.addEventListener(\"click\", closeMobileNavbar);\r\n    }, [pageLoad])\r\n\r\n    const openMobileNavbar = () => {\r\n        navbar.classList.add(\"opened\");\r\n        navbarToggle.setAttribute(\"aria-label\", \"Close navigation menu.\");\r\n    }\r\n\r\n    const closeMobileNavbar = () => {\r\n        navbar.classList.remove(\"opened\");\r\n        navbarToggle.setAttribute(\"aria-label\", \"Open navigation menu.\");\r\n    }\r\n\r\n    return(\r\n        <div className=\"MenuBar\">\r\n            <header id=\"navbar\">\r\n                <nav className=\"navbar-container container\">\r\n                    <a href=\"/\" className=\"home-link\">\r\n                        <img src={miniLogo} id=\"logo\" alt=\"logo\"/>\r\n                    </a>\r\n                    <button type=\"button\" className=\"navbar-toggle\" aria-label=\"Open navigation menu\">\r\n                        <span className=\"icon-bar\"></span>\r\n                        <span className=\"icon-bar\"></span>\r\n                        <span className=\"icon-bar\"></span>\r\n                    </button>\r\n                    <div className=\"navbar-menu\">\r\n                        <ul className=\"navbar-links\">\r\n                            <li className=\"navbar-item\"><Link className=\"navbar-link\" to=\"/\">Home</Link></li>\r\n                            <li className=\"navbar-item\"><Link className=\"navbar-link\" to=\"/events\">Events</Link></li>\r\n                            <li className=\"navbar-item\"><Link className=\"navbar-link\" to=\"/members\">Members</Link></li>\r\n                            {\r\n                                !userProfile ?\r\n                                    <li className=\"navbar-item\"><a className=\"navbar-link\" href={`${serviceURL}/api/auth/discord`} >Login<AccountCircle id=\"defaultAccountCircle\" fontSize=\"default\"/></a></li>\r\n                                    :\r\n                                    <li className=\"navbar-item\"><Link className=\"navbar-link\" to={`/profile/${userProfile._id}`}>{userProfile.userName}<Avatar id=\"accountCircle\" alt={userProfile.userName} src={`https://cdn.discordapp.com/avatars/${userProfile._id}/${userProfile.avatar}`}/></Link></li>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenubarNew","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\notAuthorised\\NotAuthorised.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\notFound\\NotFound.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\constants\\serviceURLS.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\services\\eventsService.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\NewEvent.jsx",["109"],"import React, {useContext, useState} from 'react';\r\nimport {UserContext} from \"../../store/Store\";\r\nimport './newevents.scss'\r\nimport {Paper} from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {KeyboardDateTimePicker} from \"@material-ui/pickers\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport NotAuthorised from \"../notAuthorised/NotAuthorised\";\r\nimport {publishEvent} from \"../../services/eventsService\";\r\nimport Notifications from \"../../components/Notifications/Notifications\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nfunction NewEvent(props) {\r\n    const [userProfile] = useContext(UserContext);\r\n    const [title, setTitle] = useState('');\r\n    const [titleError, setTitleError] = useState(false);\r\n    const [event, setEvent] = useState('');\r\n    const [eventError, setEventError] = useState(false);\r\n    const [game, setGame] = useState('');\r\n    const [gameError, setGameError] = useState(false);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [dateError, setDateError] = useState(false);\r\n    const [description, setDescription] = useState('');\r\n    const [descriptionError, setDescriptionError] = useState(false);\r\n    const notifications = new Notifications();\r\n    const history= useHistory();\r\n\r\n    const checkForm = () => {\r\n        let foundError = false\r\n        const dateNow = new Date();\r\n        const diff = (startDate - dateNow);\r\n        const hoursDiff = Math.floor((diff % 86400000) / 3600000);\r\n        if (title === '') {\r\n            setTitleError(true)\r\n            foundError = true\r\n        }\r\n\r\n        if (event === '') {\r\n            setEventError(true)\r\n            foundError = true\r\n        }\r\n\r\n        if (event === 'GAME' && game === '') {\r\n            setGameError(true)\r\n            foundError = true\r\n        }\r\n\r\n        if (description === '') {\r\n            setDescriptionError(true)\r\n            foundError = true;\r\n        }\r\n\r\n        if (startDate < dateNow) {\r\n            setDateError(true)\r\n            foundError = true\r\n        }\r\n\r\n        if (endDate < dateNow) {\r\n            setDateError(true)\r\n            foundError = true\r\n        }\r\n\r\n        if (foundError) {\r\n            return;\r\n        }\r\n\r\n        submitEvent()\r\n\r\n    }\r\n\r\n    const submitEvent = () => {\r\n        const data = {\r\n            title,\r\n            event,\r\n            game,\r\n            startDate,\r\n            endDate,\r\n            description\r\n        }\r\n        publishEvent(data, userProfile).then((result) => {\r\n            notifications.sendToast('success',5000, 'Success', `Event ${title} has been successfully posted`)\r\n            resetForm()\r\n            history.push('/events')\r\n        }).catch((err) => {\r\n            notifications.sendToast('error', 5000, 'Error', 'Yikes... There was an Error please try again')\r\n        })\r\n\r\n    }\r\n    const resetForm = () => {\r\n        setTitleError(false)\r\n        setTitle('')\r\n        setEventError(false)\r\n        setEvent('')\r\n        setGameError(false)\r\n        setGame('')\r\n        setDescriptionError(false)\r\n        setDescription('')\r\n        setDateError(false)\r\n        setStartDate(new Date())\r\n        setEndDate(new Date())\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"NewEvents\">\r\n\r\n            {\r\n                userProfile && userProfile.staff ?\r\n                    <Paper className=\"Paper\">\r\n                        <h1>Create New Event</h1>\r\n                        <div>\r\n                            <TextField className=\"Input Text\"\r\n                                       variant=\"filled\"\r\n                                       label=\"Event Title\"\r\n                                       error={titleError}\r\n                                       value={title}\r\n                                       onChange={(event) => {\r\n                                           setTitle(event.target.value)\r\n                                       }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <FormControl className=\"Input Text\" variant=\"filled\">\r\n                                <InputLabel>Event Type</InputLabel>\r\n                                <Select\r\n                                    label=\"Event Type\"\r\n                                    value={event}\r\n                                    error={eventError}\r\n                                    onChange={(event) => {\r\n                                        setEvent(event.target.value)\r\n                                    }}\r\n                                >\r\n                                    <MenuItem value={'GENERAL'}>General Event</MenuItem>\r\n                                    <MenuItem value={'GAME'}>Game</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </div>\r\n                        {event === 'GAME' ?\r\n                            <div>\r\n                                <FormControl className=\"Input Text\" variant=\"filled\">\r\n                                    <InputLabel>Game</InputLabel>\r\n                                    <Select\r\n                                        label=\"Game\"\r\n                                        value={game}\r\n                                        error={gameError}\r\n                                        onChange={(event) => {\r\n                                            setGame(event.target.value)\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem value={'AMONGUS'}>Among Us</MenuItem>\r\n                                        <MenuItem value={'DESTINY2'}>Destiny 2</MenuItem>\r\n                                        <MenuItem value={'QUIZ'}>Quiz</MenuItem>\r\n                                        <MenuItem value={'GOLF'}>Golf With Your Friends</MenuItem>\r\n                                        <MenuItem value={'TABLETOP'}>Tabletop Simulator</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </div>\r\n                            : null\r\n                        }\r\n                        <div>\r\n                            <TextField\r\n                                className=\"Input Text\"\r\n                                id=\"outlined-multiline-static\"\r\n                                label=\"Event Description\"\r\n                                multiline\r\n                                rows={10}\r\n                                error={descriptionError}\r\n                                value={description}\r\n                                onChange={(event) => {\r\n                                    setDescription(event.target.value)\r\n                                }}\r\n                                variant=\"filled\"\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <KeyboardDateTimePicker\r\n                                variant=\"filled\"\r\n                                className=\"Input\"\r\n                                margin=\"normal\"\r\n                                error={dateError}\r\n                                helperText={'Must be at least 3 hours in the future'}\r\n                                id=\"date-picker-dialog\"\r\n                                format=\"dd/MM/yyyy HH:mm\"\r\n                                value={startDate}\r\n                                ampm={false}\r\n                                label=\"Event Start Date\"\r\n                                disablePast\r\n                                onChange={(date) => {\r\n                                    setStartDate(date)\r\n                                }}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <KeyboardDateTimePicker\r\n                                variant=\"filled\"\r\n                                className=\"Input\"\r\n                                margin=\"normal\"\r\n                                error={dateError}\r\n                                helperText={'Must be at least 4 hours in the future'}\r\n                                id=\"date-picker-dialog\"\r\n                                format=\"dd/MM/yyyy HH:mm\"\r\n                                value={endDate}\r\n                                ampm={false}\r\n                                label=\"Event End Date\"\r\n                                disablePast\r\n                                onChange={(date) => {\r\n                                    setEndDate(date)\r\n                                }}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div id=\"buttonContainer\">\r\n                            <Button variant=\"contained\" onClick={checkForm} color=\"primary\" startIcon={<SaveIcon/>}>\r\n                                Save Event\r\n                            </Button>\r\n                        </div>\r\n                    </Paper>\r\n                    : <NotAuthorised/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewEvent;","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\Events.jsx",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\events\\EventDetails.jsx",["110"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {getEvent, signUp} from \"../../services/eventsService\";\r\nimport {Paper, Typography} from \"@material-ui/core\";\r\nimport './EventDetails.scss'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport moment from 'moment';\r\nimport {getAvatars} from \"../../services/userService\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport amongus from '../../assets/images/games/amongus.png'\r\nimport destiny2 from '../../assets/images/games/destiny2.png'\r\nimport quiztime from '../../assets/images/games/quiztime.jpg'\r\nimport golf from '../../assets/images/games/golf.jpg'\r\nimport logo from '../../assets/images/logo.svg'\r\nimport tabletop from '../../assets/images/games/tabletop.jpg'\r\nimport {UserContext} from \"../../store/Store\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PersonAdd from \"@material-ui/icons/PersonAdd\";\r\nimport Notifications from '../../components/Notifications/Notifications';\r\nconst notifications = new Notifications();\r\n\r\nconst EventDetails = (props) => {\r\n    const [userProfile] = useContext(UserContext);\r\n    const [event, setEvent] = useState(false)\r\n    const [creator, setCreator] = useState(false)\r\n    const [addedUsers, setAddedUsers] = useState([])\r\n    const [signedUp, setSignedUp] = useState(false);\r\n    useEffect(() => {\r\n        getEvent(props.match.params.eventId).then((result) => {\r\n            setEvent(result.data);\r\n        })\r\n    }, [signedUp])\r\n\r\n\r\n    useEffect(() => {\r\n        if (event.creator) {\r\n            getAvatars([event.creator]).then((result) => {\r\n                setCreator(result.data[0])\r\n            })\r\n        }\r\n        if (event.users && event.users.length > 0) {\r\n            getAvatars(event.users).then((result) => {\r\n                setAddedUsers(result.data)\r\n            })\r\n        }\r\n    }, [event])\r\n\r\n    useEffect(() => {\r\n    }, [addedUsers])\r\n\r\n    const getImage = (game) => {\r\n        let image;\r\n\r\n        switch(game){\r\n            case 'Among Us':\r\n                image = amongus;\r\n                break;\r\n            case 'Destiny 2':\r\n                image = destiny2;\r\n                break;\r\n            case 'Quiz':\r\n                image = quiztime;\r\n                break;\r\n            case 'Golf With Your Friends':\r\n                image = golf;\r\n                break;\r\n            case 'Tabletop Simulator':\r\n                image = tabletop;\r\n                break;\r\n            default:\r\n                image = logo;\r\n                break;\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <img className=\"EventImage\" alt={game} src={image}/>\r\n                <div className=\"EventMask\"/>\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    const userSignUp = () => {\r\n\r\n        if(!userProfile || !userProfile._id){\r\n            notifications.sendToast('error', 6000, 'Error', `You need to be logged in to sign up`)\r\n            return;\r\n        }\r\n\r\n        signUp(userProfile, event.eventID)\r\n            .then((result) => {\r\n                if (result.data.status === 'SUCCESS') {\r\n                    notifications.sendToast('success', 6000, 'Success', `You are now signed up for this event`)\r\n                } else {\r\n                    notifications.sendToast('error', 6000, 'Error', `You are already signed up to this event 😒`)\r\n                }\r\n                setSignedUp(true);\r\n            })\r\n            .catch((error) =>   notifications.sendToast('error', 6000, 'Error', error))\r\n    }\r\n\r\n    return (\r\n        <div className=\"EventDetails\">\r\n            <Paper className=\"Paper\">\r\n                {\r\n                    event && event.game\r\n                    ?\r\n                        getImage(event.game)\r\n                        :\r\n                        null\r\n                }\r\n                <Typography variant=\"h4\">{event.subtitle}</Typography>\r\n                {\r\n                    event\r\n                        ?\r\n                        <div>\r\n                            <div>\r\n                                <TextField\r\n                                    className=\"Input Text\"\r\n                                    id=\"outlined-multiline-static\"\r\n                                    label=\"Event Description\"\r\n                                    multiline\r\n                                    rows={10}\r\n                                    value={event.description}\r\n                                    variant=\"outlined\"\r\n                                    disabled\r\n                                />\r\n                            </div>\r\n                            {\r\n                                event.type === 'GAME'\r\n                                    ?\r\n                                    <div>\r\n                                        <TextField className=\"Input Text\"\r\n                                                   variant=\"outlined\"\r\n                                                   label=\"Game\"\r\n                                                   value={event.game}\r\n                                                   disabled\r\n                                        />\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <div>\r\n                                <TextField className=\"Input Text\"\r\n                                           variant=\"outlined\"\r\n                                           label=\"Start Date\"\r\n                                           value={moment(event.start).format('LLLL')}\r\n                                           disabled\r\n                                />\r\n                            </div>\r\n                            {\r\n                                creator\r\n                                    ?\r\n                                    <div>\r\n                                        <Typography className=\"CenterContainer Input\"\r\n                                                    variant=\"body1\">{`Created By: ${creator.userName}`}</Typography>\r\n                                        <div className=\"CenterContainer\">\r\n                                            <Avatar alt={creator.userName}\r\n                                                    className=\"Creator\"\r\n                                                    onClick={() => {window.location.href = `https://app.redwinegaming.com/profile/${event.creator}`}}\r\n                                                    src={`https://cdn.discordapp.com/avatars/${event.creator}/${creator.avatar}`}/>\r\n                                        </div>\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                addedUsers.length > 0\r\n                                    ?\r\n                                    <div>\r\n                                        <Typography className=\"CenterContainer Input\"\r\n                                                    variant=\"body1\">{`${addedUsers.length} Members Taking Part:`}</Typography>\r\n                                        <div className=\"Center\">\r\n                                            <div className=\"AvatarContainer\">\r\n                                                {addedUsers.map((user) => {\r\n                                                    if (user.avatar) {\r\n                                                        return (\r\n                                                            <div className=\"Avatar\">\r\n                                                                <Avatar alt={user.userName}\r\n                                                                        className=\"User\"\r\n                                                                        src={`https://cdn.discordapp.com/avatars/${user.id}/${user.avatar.toString()}`}\r\n                                                                        onClick={() => {window.location.href = `https://app.redwinegaming.com/profile/${user.id}`}}\r\n                                                                />\r\n                                                            </div>\r\n                                                        )\r\n                                                    } else {\r\n                                                        return (\r\n                                                            <div className=\"Avatar\">\r\n                                                                <Avatar alt={user.userName}\r\n                                                                        onClick={() => {window.location.href = `https://app.redwinegaming.com/profile/${user.id}`}}\r\n                                                                        className=\"User\">{user.userName.charAt(0)}</Avatar>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                })}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    :\r\n                                    null\r\n\r\n                            }\r\n                            {\r\n                                 creator\r\n                                    ?\r\n                                    <div id=\"buttonContainer\">\r\n                                        <Button variant=\"contained\" onClick={() => userSignUp()} color=\"primary\" startIcon={<PersonAdd/>}>\r\n                                            Sign Up\r\n                                        </Button>\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </div>\r\n                        :\r\n                        null\r\n                }\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventDetails","C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\profile\\Profile.jsx",["111","112"],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\profile\\timeTransformer.js",[],"C:\\Users\\blue_\\Documents\\GitHub\\RWGApp\\src\\pages\\members\\Members.jsx",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":26,"column":8,"nodeType":"119","endLine":26,"endColumn":18,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":55,"column":29,"nodeType":"123","endLine":55,"endColumn":79},{"ruleId":"113","replacedBy":"124"},{"ruleId":"115","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":9,"column":21,"nodeType":"128","messageId":"129","endLine":9,"endColumn":27},{"ruleId":"126","severity":1,"message":"130","line":21,"column":11,"nodeType":"128","messageId":"129","endLine":21,"endColumn":24},{"ruleId":"117","severity":1,"message":"131","line":31,"column":8,"nodeType":"119","endLine":31,"endColumn":18,"suggestions":"132"},{"ruleId":"117","severity":1,"message":"133","line":34,"column":18,"nodeType":"134","endLine":34,"endColumn":51},{"ruleId":"117","severity":1,"message":"135","line":35,"column":24,"nodeType":"134","endLine":35,"endColumn":62},{"ruleId":"117","severity":1,"message":"136","line":36,"column":22,"nodeType":"134","endLine":36,"endColumn":58},{"ruleId":"117","severity":1,"message":"137","line":37,"column":32,"nodeType":"134","endLine":37,"endColumn":69},{"ruleId":"126","severity":1,"message":"138","line":39,"column":15,"nodeType":"128","messageId":"129","endLine":39,"endColumn":24},{"ruleId":"117","severity":1,"message":"139","line":31,"column":8,"nodeType":"119","endLine":31,"endColumn":18,"suggestions":"140"},{"ruleId":"126","severity":1,"message":"141","line":22,"column":8,"nodeType":"128","messageId":"129","endLine":22,"endColumn":12},{"ruleId":"117","severity":1,"message":"142","line":39,"column":8,"nodeType":"119","endLine":39,"endColumn":10,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'notifications', 'setUserProfile', and 'userProfile'. Either include them or remove the dependency array.","ArrayExpression",["146"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["144"],["145"],"no-unused-vars","'appURL' is defined but never used.","Identifier","unusedVar","'notifications' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setUserProfile' and 'userProfile'. Either include them or remove the dependency array.",["147"],"Assignments to the 'navbar' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'navbarToggle' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'navbarMenu' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'navbarLinksContainer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'hoursDiff' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.eventId'. Either include it or remove the dependency array.",["148"],"'logo' is defined but never used.","React Hook useEffect has a missing dependency: 'props.match.params.userId'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [notifications, pageLoad, setUserProfile, userProfile]",{"range":"158","text":"159"},"Update the dependencies array to be: [pageLoad, setUserProfile, userProfile]",{"range":"160","text":"161"},"Update the dependencies array to be: [props.match.params.eventId, signedUp]",{"range":"162","text":"163"},"Update the dependencies array to be: [props.match.params.userId]",{"range":"164","text":"165"},[988,998],"[notifications, pageLoad, setUserProfile, userProfile]",[1043,1053],"[pageLoad, setUserProfile, userProfile]",[1461,1471],"[props.match.params.eventId, signedUp]",[1823,1825],"[props.match.params.userId]"]